// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DataLoader.Models;

public partial class DatabaseContext : DbContext
{
    public DatabaseContext(DbContextOptions<DatabaseContext> options)
        : base(options)
    {
    }

    public DatabaseContext()
     : base(new DbContextOptionsBuilder<DatabaseContext>()
         .UseOracle("User Id=SOCIALNA_SIET;Password=Qwert123;Data Source=192.168.192.172:1521;")
         .Options)
    {
    }


    public virtual DbSet<BlockedUser> BlockedUsers { get; set; }

    public virtual DbSet<CloseFriend> CloseFriends { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Follower> Followers { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupMember> GroupMembers { get; set; }

    public virtual DbSet<GroupMessage> GroupMessages { get; set; }

    public virtual DbSet<Like> Likes { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MessageStatus> MessageStatuses { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasDefaultSchema("SOCIALNA_SIET")
            .UseCollation("USING_NLS_COMP");

        modelBuilder.Entity<BlockedUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SYS_C008327");

            entity.ToTable("BLOCKED_USERS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.BlockedAt)
                .HasPrecision(6)
                .HasColumnName("BLOCKED_AT");
            entity.Property(e => e.BlockedId)
                .HasColumnType("NUMBER")
                .HasColumnName("BLOCKED_ID");
            entity.Property(e => e.BlockerId)
                .HasColumnType("NUMBER")
                .HasColumnName("BLOCKER_ID");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REASON");

            entity.HasOne(d => d.Blocked).WithMany(p => p.BlockedUserBlockeds)
                .HasForeignKey(d => d.BlockedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BLOCKED_USERS_BLOCKED");

            entity.HasOne(d => d.Blocker).WithMany(p => p.BlockedUserBlockers)
                .HasForeignKey(d => d.BlockerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BLOCKED_USERS_BLOCKER");
        });

        modelBuilder.Entity<CloseFriend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SYS_C008333");

            entity.ToTable("CLOSE_FRIENDS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.AddedAt)
                .HasPrecision(6)
                .HasColumnName("ADDED_AT");
            entity.Property(e => e.FriendId)
                .HasColumnType("NUMBER")
                .HasColumnName("FRIEND_ID");
            entity.Property(e => e.OwnerId)
                .HasColumnType("NUMBER")
                .HasColumnName("OWNER_ID");

            entity.HasOne(d => d.Friend).WithMany(p => p.CloseFriendFriends)
                .HasForeignKey(d => d.FriendId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLOSE_FRIENDS_FRIEND");

            entity.HasOne(d => d.Owner).WithMany(p => p.CloseFriendOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLOSE_FRIENDS_OWNER");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("SYS_C008339");

            entity.ToTable("COMMENTS");

            entity.Property(e => e.CommentId)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("COMMENT_ID");
            entity.Property(e => e.Content)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTENT");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(6)
                .HasColumnName("CREATED_AT");
            entity.Property(e => e.PostId)
                .HasColumnType("NUMBER")
                .HasColumnName("POST_ID");
            entity.Property(e => e.UserId)
                .HasColumnType("NUMBER")
                .HasColumnName("USER_ID");

            entity.HasOne(d => d.Post).WithMany(p => p.Comments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMMENTS_POST");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMMENTS_USER");
        });

        modelBuilder.Entity<Follower>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SYS_C008345");

            entity.ToTable("FOLLOWERS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.FollowedAt)
                .HasPrecision(6)
                .HasColumnName("FOLLOWED_AT");
            entity.Property(e => e.FollowedId)
                .HasColumnType("NUMBER")
                .HasColumnName("FOLLOWED_ID");
            entity.Property(e => e.FollowerId)
                .HasColumnType("NUMBER")
                .HasColumnName("FOLLOWER_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.Followed).WithMany(p => p.FollowerFolloweds)
                .HasForeignKey(d => d.FollowedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FOLLOWERS_FOLLOWED");

            entity.HasOne(d => d.FollowerNavigation).WithMany(p => p.FollowerFollowerNavigations)
                .HasForeignKey(d => d.FollowerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FOLLOWERS_FOLLOWER");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("SYS_C008350");

            entity.ToTable("GROUPS");

            entity.Property(e => e.GroupId)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("GROUP_ID");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(6)
                .HasColumnName("CREATED_AT");
            entity.Property(e => e.CreatedBy)
                .HasColumnType("NUMBER")
                .HasColumnName("CREATED_BY");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Groups)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_GROUPS_CREATED_BY");
        });

        modelBuilder.Entity<GroupMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SYS_C008355");

            entity.ToTable("GROUP_MEMBERS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.GroupId)
                .HasColumnType("NUMBER")
                .HasColumnName("GROUP_ID");
            entity.Property(e => e.JoinedAt)
                .HasPrecision(6)
                .HasColumnName("JOINED_AT");
            entity.Property(e => e.Role)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ROLE");
            entity.Property(e => e.UserId)
                .HasColumnType("NUMBER")
                .HasColumnName("USER_ID");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupMembers)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GROUP_MEMBERS_GROUP");

            entity.HasOne(d => d.User).WithMany(p => p.GroupMembers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GROUP_MEMBERS_USER");
        });

        modelBuilder.Entity<GroupMessage>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("SYS_C008394");

            entity.ToTable("GROUP_MESSAGES");

            entity.Property(e => e.MessageId)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("MESSAGE_ID");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CONTENT");
            entity.Property(e => e.GroupId)
                .HasColumnType("NUMBER")
                .HasColumnName("GROUP_ID");
            entity.Property(e => e.SenderId)
                .HasColumnType("NUMBER")
                .HasColumnName("SENDER_ID");
            entity.Property(e => e.SentAt)
                .HasPrecision(6)
                .HasColumnName("SENT_AT");
            entity.Property(e => e.StatusId)
                .HasColumnType("NUMBER")
                .HasColumnName("STATUS_ID");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupMessages)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GROUP_MESSAGES_GROUP");

            entity.HasOne(d => d.Sender).WithMany(p => p.GroupMessages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GROUP_MESSAGES_SENDER");

            entity.HasOne(d => d.Status).WithMany(p => p.GroupMessages)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_GROUP_MESSAGES_STATUS");
        });

        modelBuilder.Entity<Like>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SYS_C008361");

            entity.ToTable("LIKES");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(6)
                .HasColumnName("CREATED_AT");
            entity.Property(e => e.PostId)
                .HasColumnType("NUMBER")
                .HasColumnName("POST_ID");
            entity.Property(e => e.UserId)
                .HasColumnType("NUMBER")
                .HasColumnName("USER_ID");

            entity.HasOne(d => d.Post).WithMany(p => p.Likes)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIKES_POST");

            entity.HasOne(d => d.User).WithMany(p => p.Likes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIKES_USER");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SYS_C008365");

            entity.ToTable("LOG");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Activity)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Coment)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COMENT");
            entity.Property(e => e.UserId)
                .HasColumnType("NUMBER")
                .HasColumnName("USER_ID");

            entity.HasOne(d => d.User).WithMany(p => p.Logs)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_LOG_USER");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("SYS_C008374");

            entity.ToTable("MESSAGES");

            entity.Property(e => e.MessageId)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("MESSAGE_ID");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CONTENT");
            entity.Property(e => e.ReceiverId)
                .HasColumnType("NUMBER")
                .HasColumnName("RECEIVER_ID");
            entity.Property(e => e.SenderId)
                .HasColumnType("NUMBER")
                .HasColumnName("SENDER_ID");
            entity.Property(e => e.SentAt)
                .HasPrecision(6)
                .HasColumnName("SENT_AT");
            entity.Property(e => e.StatusId)
                .HasColumnType("NUMBER")
                .HasColumnName("STATUS_ID");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MessageReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MESSAGES_RECEIVER");

            entity.HasOne(d => d.Sender).WithMany(p => p.MessageSenders)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MESSAGES_SENDER");

            entity.HasOne(d => d.Status).WithMany(p => p.Messages)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_MESSAGES_STATUS");
        });

        modelBuilder.Entity<MessageStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("SYS_C008369");

            entity.ToTable("MESSAGE_STATUS");

            entity.Property(e => e.StatusId)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("STATUS_ID");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_NAME");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.PostId).HasName("SYS_C008322");

            entity.ToTable("POSTS");

            entity.Property(e => e.PostId)
                .HasColumnType("NUMBER")
                .HasColumnName("POST_ID");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(6)
                .HasColumnName("CREATED_AT");
            entity.Property(e => e.Photo)
                .HasColumnType("BLOB")
                .HasColumnName("PHOTO");
            entity.Property(e => e.PostComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("POST_COMMENT");
            entity.Property(e => e.PostLocation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POST_LOCATION");
            entity.Property(e => e.UserId)
                .HasColumnType("NUMBER")
                .HasColumnName("USER_ID");

            entity.HasOne(d => d.User).WithMany(p => p.Posts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POSTS_USER");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("SYS_C008320");

            entity.ToTable("USERS");

            entity.HasIndex(e => e.Email, "USERS_EMAIL_UNIQUE").IsUnique();

            entity.Property(e => e.UserId)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("USER_ID");
            entity.Property(e => e.Bio)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BIO");
            entity.Property(e => e.CreatedAt)
                .HasPrecision(6)
                .HasColumnName("CREATED_AT");
            entity.Property(e => e.DeletedAt)
                .HasPrecision(6)
                .HasColumnName("DELETED_AT");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            //entity.Property(e => e.ProfilePhoto)
            //    .HasColumnType("BLOB")
            //    .HasColumnName("PROFILE_PHOTO");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}